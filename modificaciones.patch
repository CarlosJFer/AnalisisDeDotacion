*** Begin Patch
*** Update File: backend/models/Variable.js
@@
   valor_maximo: {
     type: Number,
     required: true,
     min: 0
   },
+  // Indica si la variable utiliza umbrales flexibles. Por defecto todas
+  // las variables son estrictas (false). Cuando flexible es true, se
+  // deben especificar los umbrales inferior y superior.
+  flexible: {
+    type: Boolean,
+    default: false
+  },
   umbral_preventivo: {
     type: Number,
     required: true,
     min: 0
   },
   umbral_critico: {
     type: Number,
     required: true,
     min: 0
   },
+  // Umbrales inferiores y superiores opcionales para variables
+  // flexibles. Cuando flexible = true, estos campos son requeridos
+  // y definen las bandas inferiores y superiores del indicador.
+  umbral_preventivo_inferior: { type: Number },
+  umbral_critico_inferior: { type: Number },
+  umbral_preventivo_superior: { type: Number },
+  umbral_critico_superior: { type: Number },
*** End Patch
*** End Patch
*** Begin Patch
*** Update File: backend/models/Variable.js
@@
-// Validación de umbrales
-variableSchema.pre('validate', function(next) {
-  if (this.valor_minimo >= this.umbral_critico) {
-    return next(new Error('El valor mínimo debe ser menor que el umbral crítico'));
-  }
-  if (this.umbral_critico >= this.umbral_preventivo) {
-    return next(new Error('El umbral crítico debe ser menor que el umbral preventivo'));
-  }
-  if (this.umbral_preventivo >= this.valor_maximo) {
-    return next(new Error('El umbral preventivo debe ser menor que el valor máximo'));
-  }
-  next();
-});
+// Validación de umbrales
+variableSchema.pre('validate', function (next) {
+  // Variables estrictas (flexible = false)
+  if (!this.flexible) {
+    if (this.valor_minimo >= this.umbral_critico) {
+      return next(new Error('El valor mínimo debe ser menor que el umbral crítico'));
+    }
+    if (this.umbral_critico >= this.umbral_preventivo) {
+      return next(new Error('El umbral crítico debe ser menor que el umbral preventivo'));
+    }
+    if (this.umbral_preventivo >= this.valor_maximo) {
+      return next(new Error('El umbral preventivo debe ser menor que el valor máximo'));
+    }
+    return next();
+  }
+  // Variables flexibles requieren que los umbrales estén definidos
+  if (this.umbral_critico_inferior == null || this.umbral_preventivo_inferior == null ||
+      this.umbral_preventivo_superior == null || this.umbral_critico_superior == null) {
+    return next(new Error('Todos los umbrales deben especificarse para variables flexibles'));
+  }
+  if (!(this.valor_minimo <= this.umbral_critico_inferior)) {
+    return next(new Error('El valor mínimo debe ser menor o igual que el umbral crítico inferior'));
+  }
+  if (!(this.umbral_critico_inferior < this.umbral_preventivo_inferior)) {
+    return next(new Error('El umbral crítico inferior debe ser menor que el umbral preventivo inferior'));
+  }
+  if (!(this.umbral_preventivo_inferior < this.umbral_preventivo_superior)) {
+    return next(new Error('El umbral preventivo inferior debe ser menor que el umbral preventivo superior'));
+  }
+  if (!(this.umbral_preventivo_superior < this.umbral_critico_superior)) {
+    return next(new Error('El umbral preventivo superior debe ser menor que el umbral crítico superior'));
+  }
+  if (!(this.umbral_critico_superior <= this.valor_maximo)) {
+    return next(new Error('El umbral crítico superior debe ser menor o igual que el valor máximo'));
+  }
+  return next();
+});
*** End Patch
*** End Patch
*** Begin Patch
*** Update File: backend/models/VariableEspecifica.js
@@
   umbral_critico: {
     type: Number,
     required: true,
     min: 0
   },
+  // Umbrales flexibles inferiores y superiores (opcionales).  Se usan
+  // cuando flexible = true.
+  umbral_critico_inferior: { type: Number },
+  umbral_preventivo_inferior: { type: Number },
+  umbral_preventivo_superior: { type: Number },
+  umbral_critico_superior: { type: Number },
@@
   valor_maximo: {
     type: Number,
     required: true,
     min: 0
   },
+  // Indica si la variable usa umbrales flexibles (doble banda).
+  flexible: {
+    type: Boolean,
+    default: false
+  },
   activo: {
     type: Boolean,
     default: true
   }
*** End Patch
*** End Patch
*** Begin Patch
*** Update File: backend/models/VariableEspecifica.js
@@
-variableEspecificaSchema.pre('save', function(next) {
-  if (this.valor_minimo >= this.umbral_critico) {
-    return next(new Error('El valor mínimo debe ser menor que el umbral crítico'));
-  }
-  if (this.umbral_critico >= this.umbral_preventivo) {
-    return next(new Error('El umbral crítico debe ser menor que el umbral preventivo'));
-  }
-  if (this.umbral_preventivo >= this.valor_maximo) {
-    return next(new Error('El umbral preventivo debe ser menor que el valor máximo'));
-  }
-  if (!this.secretaria || this.secretaria.trim() === '') {
-    return next(new Error('Debe seleccionar una secretaría'));
-  }
-  next();
-});
+variableEspecificaSchema.pre('save', function (next) {
+  // Lógica de validación para variables estrictas
+  if (!this.flexible) {
+    if (this.valor_minimo >= this.umbral_critico) {
+      return next(new Error('El valor mínimo debe ser menor que el umbral crítico'));
+    }
+    if (this.umbral_critico >= this.umbral_preventivo) {
+      return next(new Error('El umbral crítico debe ser menor que el umbral preventivo'));
+    }
+    if (this.umbral_preventivo >= this.valor_maximo) {
+      return next(new Error('El umbral preventivo debe ser menor que el valor máximo'));
+    }
+  } else {
+    // Variables flexibles: validar la secuencia de umbrales
+    if (this.umbral_critico_inferior == null || this.umbral_preventivo_inferior == null ||
+        this.umbral_preventivo_superior == null || this.umbral_critico_superior == null) {
+      return next(new Error('Todos los umbrales deben especificarse para variables flexibles'));
+    }
+    if (!(this.valor_minimo <= this.umbral_critico_inferior)) {
+      return next(new Error('El valor mínimo debe ser menor o igual que el umbral crítico inferior'));
+    }
+    if (!(this.umbral_critico_inferior < this.umbral_preventivo_inferior)) {
+      return next(new Error('El umbral crítico inferior debe ser menor que el umbral preventivo inferior'));
+    }
+    if (!(this.umbral_preventivo_inferior < this.umbral_preventivo_superior)) {
+      return next(new Error('El umbral preventivo inferior debe ser menor que el umbral preventivo superior'));
+    }
+    if (!(this.umbral_preventivo_superior < this.umbral_critico_superior)) {
+      return next(new Error('El umbral preventivo superior debe ser menor que el umbral crítico superior'));
+    }
+    if (!(this.umbral_critico_superior <= this.valor_maximo)) {
+      return next(new Error('El umbral crítico superior debe ser menor o igual que el valor máximo'));
+    }
+  }
+  if (!this.secretaria || this.secretaria.trim() === '') {
+    return next(new Error('Debe seleccionar una secretaría'));
+  }
+  return next();
+});
*** End Patch
*** End Patch
